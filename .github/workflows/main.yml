name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server" -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp" -Name "SecurityLayer" -Value 0 -Force
          Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "LocalAccountTokenFilterPolicy" -Value 1 -Force
          Set-ItemProperty -Path "HKLM:\System\CurrentControlSet\Control\Lsa" -Name "LimitBlankPasswordUse" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          Write-Host "RDP configuration completed"

      - name: Create RDP User with Secure Password
        run: |
          $upper = [char[]](65..90)
          $lower = [char[]](97..122)
          $number = [char[]](48..57)
          $special = [char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126)
          $allChars = @()
          $allChars += $upper | Get-Random -Count 4
          $allChars += $lower | Get-Random -Count 4
          $allChars += $number | Get-Random -Count 4
          $allChars += $special | Get-Random -Count 4
          $password = -join ($allChars | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          Set-LocalUser -Name "RDP" -PasswordNeverExpires $true -UserMayChangePassword $false
          net user RDP /active:yes
          Add-Content -Path $env:GITHUB_ENV -Value "RDP_PASSWORD=$password"
          Write-Host "RDP user created and activated successfully"

      - name: Install Tailscale
        run: |
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"
          $output = "$env:TEMP\tailscale.msi"
          Write-Host "Downloading Tailscale..."
          Invoke-WebRequest -Uri $url -OutFile $output
          Write-Host "Installing Tailscale..."
          Start-Process msiexec.exe -ArgumentList "/i `"$output`" /quiet /norestart" -Wait
          Remove-Item $output -Force
          Write-Host "Tailscale installed"

      - name: Establish Tailscale Connection
        run: |
          Write-Host "Connecting to Tailscale..."
          $tailscale = "$env:ProgramFiles\Tailscale\tailscale.exe"
          $hostname = "gh-runner-$env:GITHUB_RUN_ID"
          & $tailscale up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$hostname
          $ip = ""
          $attempts = 0
          while ([string]::IsNullOrEmpty($ip) -and $attempts -lt 10) {
              Start-Sleep -Seconds 5
              $ip = & $tailscale ip -4
              $attempts++
              Write-Host "Attempt $attempts - Getting IP..."
          }
          if ([string]::IsNullOrEmpty($ip)) {
              Write-Error "Failed to get Tailscale IP"
              exit 1
          }
          $ip = $ip.Trim()
          Add-Content -Path $env:GITHUB_ENV -Value "TAILSCALE_IP=$ip"
          Write-Host "Tailscale IP: $ip"
     
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing RDP on: $env:TAILSCALE_IP"
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if (-not $test.TcpTestSucceeded) {
              Write-Error "RDP port test failed"
              exit 1
          }
          Write-Host "RDP is accessible"

      - name: Maintain Connection
        run: |
          Write-Host ""
          Write-Host "========================================="
          Write-Host "    RDP CONNECTION DETAILS"
          Write-Host "========================================="
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host "Username:   RDP"
          Write-Host "Password:   $env:RDP_PASSWORD"
          Write-Host "========================================="
          Write-Host ""
          $count = 0
          while ($true) {
              $count++
              $time = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
              Write-Host "[$time] RDP Active - Check $count"
              Start-Sleep -Seconds 300
          }
